name: 'Inizialize'

runs:
  using: 'composite'
  steps:
  - name: Setup env vars
    shell: bash
    run: |
      G_WORKSPACE="${GITHUB_WORKSPACE//'\'/'/'}"
      echo "G_WORKSPACE=${G_WORKSPACE}" >> "$GITHUB_ENV"

      PYTHON_SRC_DIR="${G_WORKSPACE}/${PYTHON_DIR}"
      echo "PYTHON_SRC_DIR=${PYTHON_SRC_DIR}" >> "$GITHUB_ENV"

      PYTHON_BLD_DIR="${PYTHON_SRC_DIR}/PCbuild/win32"
      echo "PYTHON_BLD_DIR=${PYTHON_BLD_DIR}" >> "$GITHUB_ENV"

      echo "ARTIFACT_NAME=Python v${PYTHON_VER}" >> "$GITHUB_ENV"
      ARTIFACT_DIR="${G_WORKSPACE}/artifact"
      echo "ARTIFACT_DIR=${ARTIFACT_DIR}" >> "$GITHUB_ENV"

      PYTHON_PATCH2_FILE="${PYTHON_PATCH2_FILE//'%s'/"${PYTHON_VER}"}"
      echo "PYTHON_PATCH2_FILE=${PYTHON_PATCH2_FILE}" >> "$GITHUB_ENV"

      LIB_MCP="${TEMP}/mcp.sh"
      echo "LIB_MCP=${LIB_MCP}" >> "$GITHUB_ENV"

  - name: Create MCP shell script
    shell: bash
    run: |
      # ---
        cat > ${LIB_MCP} <<EOF
      set +e
      declare -i rc=0
      declare resp=""

      function CheckRC()
      {
        if (( rc )); then
          op_failed
          printf "\nAn error has occurred!\n\n"
          printf "Code %s\n%s\n" \$rc "\$resp"
          exit 1
        fi
      # ---
        op_ok
      }

      function msg_info()
      {
        printf "%s... " "\$1"
      }

      function ApplyPatch()
      {
        for _patch in "\$@"; do
          echo "Applying \$_patch"
          patch -Np1 -i "\${G_WORKSPACE}/\$_patch"
        done
      }

      function op_ok()     { _op_status "ok"     "\${@}"; }
      function op_failed() { _op_status "failed" "\${@}"; }

      function _op_status()
      {
          printf "%s\n" "\$1"
      }
      EOF
