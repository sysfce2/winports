name: Build Python
run-name: Build Python

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    concurrency:
      group: '${{ github.head_ref }}-windows-x64'
      cancel-in-progress: true

    env:
        PYTHON_DIR: cpython
        PYTHON_VER: v3.11.3
        PYTHON_PATCH1_URL: "https://raw.githubusercontent.com/msys2/MSYS2-packages/master/python/"
        PYTHON_PATCH1_FILE: "009-3.8-export-PySignal_SetWakeupFd.patch"
        PYTHON_PATCH2_URL: "https://gist.githubusercontent.com/josephshen/0f2473edcf27046a69d0bb41b7103066/raw/f48e82238aefba7534f405ea5a2dd5466a88f6fd/"
        PYTHON_PATCH2_FILE: "restore-support-for-windows-7.patch"

    steps:
      - name: Initialize
        shell: bash
        run: |
          G_WORKSPACE="${GITHUB_WORKSPACE//'\'/'/'}"
          echo "G_WORKSPACE=${G_WORKSPACE}" >> "$GITHUB_ENV"
          
          PYTHON_SRC_DIR="${G_WORKSPACE}/${PYTHON_DIR}"
          echo "PYTHON_SRC_DIR=${PYTHON_SRC_DIR}" >> "$GITHUB_ENV"

          PYTHON_BLD_DIR="${PYTHON_SRC_DIR}/PCbuild/win32"
          echo "PYTHON_BLD_DIR=${PYTHON_BLD_DIR}" >> "$GITHUB_ENV"

          echo "ARTIFACT_NAME=Python" >> "$GITHUB_ENV"
          ARTIFACT_DIR="${G_WORKSPACE}/artifact"
          echo "ARTIFACT_DIR=${ARTIFACT_DIR}" >> "$GITHUB_ENV"

      - name: Checkout repo
        if: ${{ true }}
        uses: actions/checkout@v3
        with:
          repository: python/cpython
          ref: ${{ env.PYTHON_VER }}
          path: ${{ env.PYTHON_DIR }}

      - name: Fix repo
        if: ${{ true }}
        shell: bash
        run: |
          set +e
          declare -i rc=0
          declare resp=""

          cd "${G_WORKSPACE}"

          function CheckRC()
          {
            if (( rc )); then
              echo 'failed'
              printf "\nAn error has occurred!\n\n"
              printf "Code %s\n%s\n" $rc "$resp"
              exit 1
            fi
            # ---
            echo 'ok'
          }

          function ApplyPatch()
          {
            for _patch in "$@"; do
              echo "Applying $_patch"
              patch -Np1 -i "${G_WORKSPACE}/$_patch"
            done
          }

          printf "Retrieving patch file '${PYTHON_PATCH1_FILE}'... "
          resp=`curl -f -s -S -L -o "${PYTHON_PATCH1_FILE}" "${PYTHON_PATCH1_URL}/${PYTHON_PATCH1_FILE}" 2>&1`
          rc=$?; CheckRC

          printf "Retrieving patch file '${PYTHON_PATCH2_FILE}'... "
          resp=`curl -f -s -S -L -o "${PYTHON_PATCH2_FILE}" "${PYTHON_PATCH2_URL}/${PYTHON_PATCH2_FILE}" 2>&1`
          rc=$?; CheckRC

          cd "${PYTHON_SRC_DIR}"
          ApplyPatch \
            ${PYTHON_PATCH1_FILE} \
            ${PYTHON_PATCH2_FILE}

          set -e
          printf "Deleting unneded files... "
          cd "${PYTHON_SRC_DIR}/include"
          rm -f README.rst pydtrace.d
          echo 'ok'
          exit 1

      - name: Build
        if: ${{ true }}
        shell: cmd
        run: |
          cd "%GITHUB_WORKSPACE%\%PYTHON_DIR%"
          PCbuild\build.bat -e -v -c Release -p Win32

      - name: Make artifact
        if: ${{ true }}
        shell: bash
        run: |
          set -e
          shopt -s globstar
          # ---
          echo "Creating directories..."
          mkdir -p "${ARTIFACT_DIR}"
          mkdir -p "${ARTIFACT_DIR}/DLLs"
          mkdir -p "${ARTIFACT_DIR}/include"
          mkdir -p "${ARTIFACT_DIR}/Lib"
          mkdir -p "${ARTIFACT_DIR}/libs"
          # ---
          cd "$PYTHON_BLD_DIR"

          echo "Deleting unneeded files..."
          rm -f pybuilddir.txt _test*.* _freeze*.*
          rm -f -r -- **/*.pdb
          rm -f -r -- **/*.exp

          echo "Copying bin files..."
          cp -a --parents *.exe *.txt py*.dll vcruntime*.dll "${ARTIFACT_DIR}"
          rm py*.dll vcruntime*.dll

          echo "Copying dll files..."
          cp -a --parents *.dll *.pyd "${ARTIFACT_DIR}/DLLs"

          echo "Copying libs files..."
          cp -a --parents *.lib "${ARTIFACT_DIR}/libs"
          # ---
          echo "Copying 'include' dir content..."
          cd "${PYTHON_SRC_DIR}/include"
          cp -a --parents * "${ARTIFACT_DIR}/include"
          # ---
          echo "Copying 'Lib' dir content..."
          cd "${PYTHON_SRC_DIR}/Lib"
          cp -a --parents * "${ARTIFACT_DIR}/Lib"

      - name: ${{ format('Upload artifact {0}', env.ARTIFACT_NAME) }}
        if: ${{ true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: error
