name: Build Python
run-name: Build Python

on:
  push:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  PYTHON_DIR: cpython
  PYTHON_VER: 3.11.3
  PYTHON_PATCH1_URL: "https://raw.githubusercontent.com/msys2/MSYS2-packages/master/python/"
  PYTHON_PATCH1_FILE: "009-3.8-export-PySignal_SetWakeupFd.patch"
  PYTHON_PATCH2_URL: "https://raw.githubusercontent.com/sysfce2/winports/main/packages/msys2/python/"
  PYTHON_PATCH2_FILE: "restore-windows-7-support-for-python%s.patch"

jobs:
  build_win32:
    name: 'Windows (x86)'
    runs-on: windows-latest
    steps:
    - name: Initialize
      uses: sysfce2/winports/actions/init@main

    - name: Checkout repo
      if: ${{ true }}
      uses: actions/checkout@v3
      with:
        repository: python/cpython
        ref: v${{ env.PYTHON_VER }}
        path: ${{ env.PYTHON_DIR }}

    - name: Prepare
      shell: bash
      if: ${{ true }}
      run: |
        source "$LIB_MCP"; if (( $? )); then echo -n "\nFATAL ERROR: Unable to load library \"${LIB_MCP}\"!"; exit 1; fi
        # ---
        cd "${G_WORKSPACE}"

        msg_info "Retrieving patch file '${PYTHON_PATCH1_FILE}'"
        resp=`curl -f -s -S -L -o "${PYTHON_PATCH1_FILE}" "${PYTHON_PATCH1_URL}/${PYTHON_PATCH1_FILE}" 2>&1`
        rc=$?; CheckRC
        # ---
        msg_info "Retrieving patch file '${PYTHON_PATCH2_FILE}'"
        resp=`curl -f -s -S -L -o "${PYTHON_PATCH2_FILE}" "${PYTHON_PATCH2_URL}/${PYTHON_PATCH2_FILE}" 2>&1`
        rc=$?; CheckRC
        # ---
        set -e
        cd "${PYTHON_SRC_DIR}"

        ApplyPatch \
          ${PYTHON_PATCH1_FILE} \
          ${PYTHON_PATCH2_FILE}

    - name: Build
      if: ${{ true }}
      shell: cmd
      working-directory: ${{ env.PYTHON_SRC_DIR }}
      run: .\PCbuild\build.bat -e -p Win32
      timeout-minutes: 30

    - name: Display build info
      if: ${{ false }}
      shell: cmd
      working-directory: ${{ env.PYTHON_SRC_DIR }}
      run: .\python.bat -m test.pythoninfo

    - name: Tests
      if: ${{ false }}
      shell: cmd
      working-directory: ${{ env.PYTHON_SRC_DIR }}
      run: .\PCbuild\rt.bat -p Win32 -q -uall -u-cpu -rwW --slowest --timeout=1200 -j0

    - name: Make artifact
      if: ${{ true }}
      shell: bash
      run: |
        source "$LIB_MCP"; if (( $? )); then echo -n "\nFATAL ERROR: Unable to load library \"${LIB_MCP}\"!"; exit 1; fi
        set -e
        # ---
        msg_info "Creating directories"
          mkdir -p "${ARTIFACT_DIR}"
          mkdir -p "${ARTIFACT_DIR}/DLLs"
          mkdir -p "${ARTIFACT_DIR}/include"
          mkdir -p "${ARTIFACT_DIR}/Lib"
          mkdir -p "${ARTIFACT_DIR}/libs"
        op_ok
        # ---
        msg_info "Removing unneeded files"
          cd "${PYTHON_SRC_DIR}/include"
          rm -f README.rst pydtrace.d cpython/pyerrors.h.orig

          cd "${PYTHON_BLD_DIR}"
          rm -f _test*.*
          rm -f _freeze*.*
          rm -f *.pdb
          rm -f *.exp
        op_ok
        # ---
        cd "$PYTHON_BLD_DIR"

        msg_info "Copying bin files"
          cp -a *.exe py*.dll vcruntime*.dll "${ARTIFACT_DIR}"
          rm py*.dll vcruntime*.dll
        op_ok

        msg_info "Copying txt file"
          cp -a LICENSE.txt "${ARTIFACT_DIR}"
        op_ok

        msg_info "Copying dll files"
          cp -a *.dll *.pyd "${ARTIFACT_DIR}/DLLs"
        op_ok

        msg_info "Copying libs files"
          cp -a *.lib "${ARTIFACT_DIR}/libs"
        op_ok
        # ---
        msg_info "Copying 'include' dir content"
          cd "${PYTHON_SRC_DIR}/include"
          cp -a --parents * "${ARTIFACT_DIR}/include"
        op_ok
        # ---
        msg_info "Copying 'pyconfig.h' file"
          cd "${PYTHON_SRC_DIR}/PC"
          cp -a -f pyconfig.h "${ARTIFACT_DIR}/include"
        op_ok
        # ---
        msg_info "Copying 'Lib' dir content"
          cd "${PYTHON_SRC_DIR}/Lib"
          cp -a --parents * "${ARTIFACT_DIR}/Lib"
        op_ok

    - name: ${{ format('Upload artifact {0}', env.ARTIFACT_NAME) }}
      if: ${{ true }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_DIR }}
        if-no-files-found: error
