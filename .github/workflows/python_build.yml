name: Build Python
run-name: Build Python

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    concurrency:
      group: '${{ github.head_ref }}-windows-x64'
      cancel-in-progress: true

    env:
        PYTHON_DIR: cpython
        PYTHON_VER: 3.11.3
        PYTHON_PATCH1_URL: "https://raw.githubusercontent.com/msys2/MSYS2-packages/master/python/"
        PYTHON_PATCH1_FILE: "009-3.8-export-PySignal_SetWakeupFd.patch"
        PYTHON_PATCH2_URL: "https://raw.githubusercontent.com/sysfce2/winports/main/packages/msys2/python/"
        PYTHON_PATCH2_FILE: "restore-windows-7-support-for-python%s.patch"

    defaults:
      run:
        shell: bash

    steps:
      - name: Initialize
        run: |
          G_WORKSPACE="${GITHUB_WORKSPACE//'\'/'/'}"
          echo "G_WORKSPACE=${G_WORKSPACE}" >> "$GITHUB_ENV"
          
          PYTHON_SRC_DIR="${G_WORKSPACE}/${PYTHON_DIR}"
          echo "PYTHON_SRC_DIR=${PYTHON_SRC_DIR}" >> "$GITHUB_ENV"

          PYTHON_BLD_DIR="${PYTHON_SRC_DIR}/PCbuild/win32"
          echo "PYTHON_BLD_DIR=${PYTHON_BLD_DIR}" >> "$GITHUB_ENV"

          echo "ARTIFACT_NAME=Python" >> "$GITHUB_ENV"
          ARTIFACT_DIR="${G_WORKSPACE}/artifact"
          echo "ARTIFACT_DIR=${ARTIFACT_DIR}" >> "$GITHUB_ENV"

          PYTHON_PATCH2_FILE="${PYTHON_PATCH2_FILE//'%s'/"${PYTHON_VER}"}"
          echo "PYTHON_PATCH2_FILE=${PYTHON_PATCH2_FILE}" >> "$GITHUB_ENV"

          LIB_MCP="${TEMP}/mcp.sh"
          echo "LIB_MCP=${LIB_MCP}" >> "$GITHUB_ENV"
          # ---
            cat > ${LIB_MCP} <<EOF
          set +e
          declare -i rc=0
          declare resp=""

          function ll()
          {
            ls -a -g -o --group-directories-first --time-style=long-iso "\$@"
          }

          function CheckRC()
          {
            if (( rc )); then
              op_failed
              printf "\nAn error has occurred!\n\n"
              printf "Code %s\n%s\n" \$rc "\$resp"
              exit 1
            fi
            # ---
            op_ok
          }

          function msg_info()
          {
            echo "arg: |\$@|"
            printf "%s... " "\$1"
          }

          function ApplyPatch()
          {
            for _patch in "\$@"; do
              echo "Applying \$_patch"
              patch -Np1 -i "\${G_WORKSPACE}/\$_patch"
            done
          }

          function op_ok()     { _op_status "ok"     "\${@}"; }
          function op_failed() { _op_status "failed" "\${@}"; }

          function _op_status()
          {
              printf "%s\n" "\$1"
          }
          EOF

      - name: Checkout repo
        if: ${{ false }}
        uses: actions/checkout@v3
        with:
          repository: python/cpython
          ref: v${{ env.PYTHON_VER }}
          path: ${{ env.PYTHON_DIR }}

      - name: Prepare
        if: ${{ true }}
        run: |
          cat "$LIB_MCP"
          exit 1
          source "$LIB_MCP"; if (( $? )); then echo -n "\nFATAL ERROR: Unable to load library \"${LIB_MCP}\"!"; exit 1; fi
          # ---
          cd "${G_WORKSPACE}"

          msg_info "Retrieving patch file '${PYTHON_PATCH1_FILE}'"
          resp=`curl -f -s -S -L -o "${PYTHON_PATCH1_FILE}" "${PYTHON_PATCH1_URL}/${PYTHON_PATCH1_FILE}" 2>&1`
          rc=$?; CheckRC
          # ---
          msg_info "Retrieving patch file '${PYTHON_PATCH2_FILE}'"
          resp=`curl -f -s -S -L -o "${PYTHON_PATCH2_FILE}" "${PYTHON_PATCH2_URL}/${PYTHON_PATCH2_FILE}" 2>&1`
          rc=$?; CheckRC
          echo "PWD: $PWD"
          ll
          exit 1
          # ---
          set -e
          cd "${PYTHON_SRC_DIR}"

          ApplyPatch \
            ${PYTHON_PATCH1_FILE} \
            ${PYTHON_PATCH2_FILE}
          # ---
          msg_info "Removing unneded files"
          cd "${PYTHON_SRC_DIR}/include"
          rm -f README.rst pydtrace.d
          op_ok

      - name: Build
        if: ${{ false }}
        shell: cmd
        run: |
          cd "%GITHUB_WORKSPACE%\%PYTHON_DIR%"
          PCbuild\build.bat -e -v -c Release -p Win32

      - name: Make artifact
        if: ${{ true }}
        run: |
          source "$LIB_MCP"; if (( $? )); then echo -n "\nFATAL ERROR: Unable to load library \"${LIB_MCP}\"!"; exit 1; fi
          set -e
          # ---
          msg_info "Creating directories"
          mkdir -p "${ARTIFACT_DIR}"
          mkdir -p "${ARTIFACT_DIR}/DLLs"
          mkdir -p "${ARTIFACT_DIR}/include"
          mkdir -p "${ARTIFACT_DIR}/Lib"
          mkdir -p "${ARTIFACT_DIR}/libs"
          op_ok
          # ---
          cd "$PYTHON_BLD_DIR"

          msg_info "Removing unneeded files"
          rm -f pybuilddir.txt _test*.* _freeze*.*
          rm -f -r *.pdb
          rm -f -r *.exp
          op_ok

          msg_info "Copying bin files"
          cp -a --parents *.exe *.txt py*.dll vcruntime*.dll "${ARTIFACT_DIR}"
          rm py*.dll vcruntime*.dll
          op_ok

          msg_info "Copying dll files"
          cp -a --parents *.dll *.pyd "${ARTIFACT_DIR}/DLLs"
          op_ok

          msg_info "Copying libs files"
          cp -a --parents *.lib "${ARTIFACT_DIR}/libs"
          op_ok
          # ---
          msg_info "Copying 'include' dir content"
          cd "${PYTHON_SRC_DIR}/include"
          cp -a --parents * "${ARTIFACT_DIR}/include"
          op_ok
          # ---
          msg_info "Copying 'pyconfig.h' file"
          cd "${PYTHON_SRC_DIR}/PC"
          cp -a pyconfig.h "${ARTIFACT_DIR}/include"
          op_ok
          # ---
          msg_info "Copying 'Lib' dir content"
          cd "${PYTHON_SRC_DIR}/Lib"
          cp -a --parents * "${ARTIFACT_DIR}/Lib"
          op_ok

      - name: ${{ format('Upload artifact {0}', env.ARTIFACT_NAME) }}
        if: ${{ true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: error
