diff -au a/Modules/_winapi.c b/Modules/_winapi.c
--- a/Modules/_winapi.c	2023-04-05 00:22:17.000000000 +0200
+++ b/Modules/_winapi.c	2023-05-25 02:37:15.647669800 +0200
@@ -41,6 +41,11 @@
 
 #define WINDOWS_LEAN_AND_MEAN
 #include "windows.h"
+/* winnls.h */
+#if WINVER < 0x0602 // Windows 7 or erarlier
+#define LCMAP_SORTHANDLE 0x20000000
+#define LCMAP_HASH 0x00040000
+#endif
 #include <crtdbg.h>
 #include "winreparse.h"
 
diff -au a/Modules/getpath.c b/Modules/getpath.c
--- a/Modules/getpath.c	2023-04-05 00:22:17.000000000 +0200
+++ b/Modules/getpath.c	2023-05-25 04:06:33.333111900 +0200
@@ -11,7 +11,11 @@
 
 #ifdef MS_WINDOWS
 #  include <windows.h>            // GetFullPathNameW(), MAX_PATH
+# if WINVER >= 0x0602 // Windows 8 or greater
 #  include <pathcch.h>
+# else // Windows 7
+#  include <Shlwapi.h>
+# endif
 #endif
 
 #ifdef __APPLE__
@@ -233,9 +237,16 @@
 #ifdef MS_WINDOWS
         const wchar_t *ext;
         DWORD attr = GetFileAttributesW(path);
+  #if WINVER < 0x0602 // Windows 7 or earlier
+        ext = PathFindExtensionW(path);
+  #endif
         r = (attr != INVALID_FILE_ATTRIBUTES) &&
             !(attr & FILE_ATTRIBUTE_DIRECTORY) &&
+  #if WINVER >= 0x0602 // Windows 8 or greater
             SUCCEEDED(PathCchFindExtension(path, cchPath + 1, &ext)) &&
+  #else // Windows 7
+            (ext != NULL) &&
+  #endif
             (CompareStringOrdinal(ext, -1, L".exe", -1, 1 /* ignore case */) == CSTR_EQUAL)
             ? Py_True : Py_False;
 #else
diff -au a/Modules/posixmodule.c b/Modules/posixmodule.c
--- a/Modules/posixmodule.c	2023-04-05 00:22:17.000000000 +0200
+++ b/Modules/posixmodule.c	2023-05-25 04:03:59.505313400 +0200
@@ -15,7 +15,11 @@
 // whereas pycore_condvar.h defines the WIN32_LEAN_AND_MEAN macro.
 #ifdef MS_WINDOWS
 #  include <windows.h>
+# if WINVER >= 0x0602 // Windows 8 or greater
 #  include <pathcch.h>
+# else // Windows 7
+#  include <Shlwapi.h>
+# endif
 #  include <lmcons.h>             // UNLEN
 #  include "osdefs.h"             // SEP
 #  define HAVE_SYMLINK
@@ -4499,7 +4503,14 @@
     }
 
     Py_BEGIN_ALLOW_THREADS
+#if WINVER >= 0x0602 // Windows 8 or greater
     ret = PathCchSkipRoot(buffer, &end);
+#else // Windows 7
+    end = PathSkipRootW(buffer);
+    if (!end) {
+        ret = E_FAIL;
+    }
+#endif
     Py_END_ALLOW_THREADS
     if (FAILED(ret)) {
         result = Py_BuildValue("sO", "", path->object);
diff -au a/PC/launcher2.c b/PC/launcher2.c
--- a/PC/launcher2.c	2023-04-05 00:22:17.000000000 +0200
+++ b/PC/launcher2.c	2023-05-25 05:00:02.884687700 +0200
@@ -8,8 +8,13 @@
 
 #define __STDC_WANT_LIB_EXT1__ 1
 
+#include "pyconfig.h"
 #include <windows.h>
+#if Py_WINVER >= 0x0602 // Windows 8 or greater
 #include <pathcch.h>
+#else // Windows 7
+#include <Shlwapi.h>
+#endif
 #include <fcntl.h>
 #include <io.h>
 #include <shlobj.h>
@@ -188,7 +193,11 @@
 bool
 join(wchar_t *buffer, size_t bufferLength, const wchar_t *fragment)
 {
+#if Py_WINVER >= 0x0602 // Windows 8 or greater
     if (SUCCEEDED(PathCchCombineEx(buffer, bufferLength, buffer, fragment, PATHCCH_ALLOW_LONG_PATHS))) {
+#else // Windows 7
+    if (PathCombineW(buffer, buffer, fragment)) {
+#endif
         return true;
     }
     return false;
@@ -854,7 +863,11 @@
         }
     }
     if (GetModuleFileNameW(NULL, iniPath, MAXLEN) &&
+#if Py_WINVER >= 0x0602 // Windows 8 or greater
         SUCCEEDED(PathCchRemoveFileSpec(iniPath, MAXLEN)) &&
+#else // Windows 7
+        PathRemoveFileSpecW(iniPath) &&
+#endif
         join(iniPath, MAXLEN, L"py.ini")) {
         debug(L"# Reading from %s for %s/%s\n", iniPath, section, settingName);
         n = GetPrivateProfileStringW(section, settingName, NULL, buffer, MAXLEN, iniPath);
@@ -923,11 +936,17 @@
 
     if (!GetCurrentDirectoryW(MAXLEN, buffer) ||
         wcsncpy_s(script, MAXLEN, search->scriptFile, search->scriptFileLength) ||
+#if Py_WINVER >= 0x0602 // Windows 8 or greater
         FAILED(PathCchCombineEx(buffer, MAXLEN, buffer, script,
                                 PATHCCH_ALLOW_LONG_PATHS)) ||
         FAILED(PathCchRemoveFileSpec(buffer, MAXLEN)) ||
         FAILED(PathCchCombineEx(buffer, MAXLEN, buffer, command,
                                 PATHCCH_ALLOW_LONG_PATHS))
+#else // Windows 7
+        !PathCombineW(buffer, buffer, script) ||
+        !PathRemoveFileSpecW(buffer) ||
+        !PathCombineW(buffer, buffer, command)
+#endif
     ) {
         return RC_NO_MEMORY;
     }
@@ -1419,7 +1438,11 @@
         return RC_NO_MEMORY;
     }
 
+#if Py_WINVER >= 0x0602 // Windows 8 or greater
     if (FAILED(PathCchCombineEx(buffer, MAXLEN, installDir, fragmentBuffer, PATHCCH_ALLOW_LONG_PATHS))) {
+#else // Windows 7
+    if (!PathCombineW(buffer, installDir, fragmentBuffer)) {
+#endif
         return RC_NO_MEMORY;
     }
 
diff -au a/PC/pyconfig.h b/PC/pyconfig.h
--- a/PC/pyconfig.h	2023-04-05 00:22:17.000000000 +0200
+++ b/PC/pyconfig.h	2023-05-24 06:47:53.178970100 +0200
@@ -142,8 +142,8 @@
 
 /* set the version macros for the windows headers */
 /* Python 3.9+ requires Windows 8 or greater */
-#define Py_WINVER 0x0602 /* _WIN32_WINNT_WIN8 */
-#define Py_NTDDI NTDDI_WIN8
+#define Py_WINVER 0x0601 /* _WIN32_WINNT_WIN7 */
+#define Py_NTDDI NTDDI_WIN7
 
 /* We only set these values when building Python - we don't want to force
    these values on extensions, as that will affect the prototypes and
diff -au a/PCbuild/_freeze_module.vcxproj b/PCbuild/_freeze_module.vcxproj
--- a/PCbuild/_freeze_module.vcxproj	2023-04-05 00:22:17.000000000 +0200
+++ b/PCbuild/_freeze_module.vcxproj	2023-05-25 02:48:02.944693100 +0200
@@ -94,7 +94,7 @@
     </ClCompile>
     <Link>
       <SubSystem>Console</SubSystem>
-      <AdditionalDependencies>version.lib;ws2_32.lib;pathcch.lib;bcrypt.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>version.lib;ws2_32.lib;shlwapi.lib;bcrypt.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
     </Link>
   </ItemDefinitionGroup>
diff -au a/PCbuild/pylauncher.vcxproj b/PCbuild/pylauncher.vcxproj
--- a/PCbuild/pylauncher.vcxproj	2023-04-05 00:22:17.000000000 +0200
+++ b/PCbuild/pylauncher.vcxproj	2023-05-25 02:48:08.460008500 +0200
@@ -95,7 +95,7 @@
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>shell32.lib;pathcch.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>shell32.lib;shlwapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <SubSystem>Console</SubSystem>
     </Link>
   </ItemDefinitionGroup>
diff -au a/PCbuild/pythoncore.vcxproj b/PCbuild/pythoncore.vcxproj
--- a/PCbuild/pythoncore.vcxproj	2023-04-05 00:22:17.000000000 +0200
+++ b/PCbuild/pythoncore.vcxproj	2023-05-25 02:48:15.341402100 +0200
@@ -106,7 +106,7 @@
       <PreprocessorDefinitions Condition="$(IncludeExternals)">_Py_HAVE_ZLIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>version.lib;ws2_32.lib;pathcch.lib;bcrypt.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>version.lib;ws2_32.lib;shlwapi.lib;bcrypt.lib;%(AdditionalDependencies)</AdditionalDependencies>
     </Link>
   </ItemDefinitionGroup>
   <ItemGroup>
diff -au a/PCbuild/pywlauncher.vcxproj b/PCbuild/pywlauncher.vcxproj
--- a/PCbuild/pywlauncher.vcxproj	2023-04-05 00:22:17.000000000 +0200
+++ b/PCbuild/pywlauncher.vcxproj	2023-05-24 21:40:34.634510100 +0200
@@ -95,7 +95,7 @@
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>shell32.lib;pathcch.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>shell32.lib;shlwapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <SubSystem>Windows</SubSystem>
     </Link>
   </ItemDefinitionGroup>
diff -au a/Python/fileutils.c b/Python/fileutils.c
--- a/Python/fileutils.c	2023-04-05 00:22:17.000000000 +0200
+++ b/Python/fileutils.c	2023-05-25 04:02:14.091284100 +0200
@@ -8,7 +8,11 @@
 #ifdef MS_WINDOWS
 #  include <malloc.h>
 #  include <windows.h>
+# if WINVER >= 0x0602 // Windows 8 or greater
 #  include <pathcch.h>            // PathCchCombineEx
+# else // Windows 7
+#  include <Shlwapi.h>
+# endif
 extern int winerror_to_errno(int);
 #endif
 
@@ -2005,7 +2009,15 @@
 {
 #ifdef MS_WINDOWS
     const wchar_t *tail;
+  #if WINVER >= 0x0602 // Windows 8 or greater
     HRESULT hr = PathCchSkipRoot(path, &tail);
+  #else // Windows 7
+	HRESULT hr = S_OK;
+    tail = PathSkipRootW(path);
+    if (!tail) {
+        hr = E_FAIL;
+    }
+  #endif
     if (FAILED(hr) || path == tail) {
         return 0;
     }
@@ -2093,8 +2105,12 @@
              const wchar_t *dirname, const wchar_t *relfile)
 {
 #ifdef MS_WINDOWS
+  #if WINVER >= 0x0602 // Windows 8 or greater
     if (FAILED(PathCchCombineEx(buffer, bufsize, dirname, relfile,
         PATHCCH_ALLOW_LONG_PATHS))) {
+  #else // Windows 7
+    if (!PathCombineW(buffer, dirname, relfile)) {
+  #endif
         return -1;
     }
 #else
